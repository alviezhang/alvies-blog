{"componentChunkName":"component---src-templates-blog-post-js","path":"/archives/2015-06-09-singleton-in-python/","result":{"data":{"site":{"siteMetadata":{"title":"Alvie's Blog"}},"markdownRemark":{"id":"8574e977-02c8-518b-920b-ce4d44982888","excerpt":"单例模式，是一种常用的软件设计模式，单例对象的类必须保证只有一个实例存在。 之前自己土鳖的实现： 上面的实现缺点很明显，无论有没有调用  的  方法， 对象总会初始化。改进也很简单： 用类的静态变量替换全局变量，就只会在使用时才初始化单例对象。对于 CPython 来说，由于 GIL…","html":"<p>单例模式，是一种常用的软件设计模式，单例对象的类必须保证只有一个实例存在。</p>\n<p>之前自己土鳖的实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">_instance <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> _instance</code></pre></div>\n<p>上面的实现缺点很明显，无论有没有调用 <code class=\"language-text\">Singleton</code> 的 <code class=\"language-text\">get_instance</code> 方法，<code class=\"language-text\">_instance</code> 对象总会初始化。改进也很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Singleton<span class=\"token punctuation\">.</span>_instance</code></pre></div>\n<p>用类的静态变量替换全局变量，就只会在使用时才初始化单例对象。<del>对于 CPython 来说，由于 GIL 的限制，单个进程同一时刻至多有一个线程运行，所以不需要担心 <code class=\"language-text\">get_instance</code> 函数第 2 行执行时产生多个单例。如果考虑其他可能发生并发的 Python 实现</del>，可以使用下面的加锁版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> threading\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    _instance_lock <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> Singleton<span class=\"token punctuation\">.</span>_instance_lock<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Singleton<span class=\"token punctuation\">.</span>_instance</code></pre></div>\n<p>上面的实现在每次执行 <code class=\"language-text\">get_instance</code> 时都会加锁，还不够好，因此就有了下面的”双重检查加锁”版本：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _instance <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    _instance_lock <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">with</span> Singleton<span class=\"token punctuation\">.</span>_instance_lock<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    Singleton<span class=\"token punctuation\">.</span>_instance <span class=\"token operator\">=</span> Singleton<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Singleton<span class=\"token punctuation\">.</span>_instance</code></pre></div>\n<p>每次写单例要写那么多代码很麻烦呀，怎么办呢？有装饰器来帮忙：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    instances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> cls <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> instances<span class=\"token punctuation\">:</span>\n            instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> instances<span class=\"token punctuation\">[</span>cls<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> wrap</code></pre></div>\n<p>这个装饰起没有考虑多线程并发问题，<del>不过在日常的应用中(CPython)应该足够用了</del>。</p>\n<hr>\n<p>参考文献：</p>\n<p><a href=\"http://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\">单例模式 - 维基百科</a></p>\n<p><a href=\"https://github.com/tornadoweb/tornado/blob/master/tornado/ioloop.py\">Tornado: ioloop.py</a></p>","frontmatter":{"title":"Python 中的单例模式","date":"June 09, 2015","description":null}},"previous":{"fields":{"slug":"/archives/2015-03-17-refresh-object-in-sqlalchemy/"},"frontmatter":{"title":"SQLAlchemy 获取 AutoField 值"}},"next":{"fields":{"slug":"/archives/2015-06-28-openwrt-mount-usb-exroot/"},"frontmatter":{"title":"OpenWrt 挂载 USB 存储设置 exroot"}}},"pageContext":{"id":"8574e977-02c8-518b-920b-ce4d44982888","previousPostId":"413188ab-e65c-58f4-92d8-a92290978f94","nextPostId":"67779b1f-e76f-561b-a260-69ffca77027f"}},"staticQueryHashes":["2841359383","3257411868"]}